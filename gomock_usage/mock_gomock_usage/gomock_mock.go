// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_gomock_usage is a generated GoMock package.
package mock_gomock_usage

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDBStore is a mock of DBStore interface.
type MockDBStore struct {
	ctrl     *gomock.Controller
	recorder *MockDBStoreMockRecorder
}

// MockDBStoreMockRecorder is the mock recorder for MockDBStore.
type MockDBStoreMockRecorder struct {
	mock *MockDBStore
}

// NewMockDBStore creates a new mock instance.
func NewMockDBStore(ctrl *gomock.Controller) *MockDBStore {
	mock := &MockDBStore{ctrl: ctrl}
	mock.recorder = &MockDBStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBStore) EXPECT() *MockDBStoreMockRecorder {
	return m.recorder
}

// Put mocks base method.
func (m *MockDBStore) Put(k, v string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", k, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockDBStoreMockRecorder) Put(k, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockDBStore)(nil).Put), k, v)
}

// Get mocks base method.
func (m *MockDBStore) Get(k string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", k)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDBStoreMockRecorder) Get(k interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDBStore)(nil).Get), k)
}
